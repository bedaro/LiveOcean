"""
Functions to use with the new HYCOM backfill code.

"""

# setup
import os
import sys
alp = os.path.abspath('../../alpha')
if alp not in sys.path:
    sys.path.append(alp)
import zfun
import Lfun

Ldir = Lfun.Lstart()
fn_out = Ldir['LOo'] + 'misc/hycom_test.nc'

import time
from datetime import datetime, timedelta

import netCDF4 as nc

from urllib.request import urlretrieve
from urllib.error import URLError
from socket import timeout


aa = [-129, -121, 39, 51]

testing = True

# specify output file
# get rid of the old version, if it exists
try:
    os.remove(fn_out)
except OSError:
    pass # assume error was because the file did not exist

# specify time limits
# get today's  date string in LO format

dstr00 = datetime.now().strftime('%Y.%m.%d')
#dstr00 = this_dt.strftime('%Y.%m.%d')

print('Working on ' + dstr00)
# get time limits for forecast
dt00 = datetime.strptime(dstr00, '%Y.%m.%d')
dt0 = dt00 - timedelta(days=2)
if testing == True:
    dt1 = dt00 - timedelta(days=1)
else:
    dt1 = dt00 + timedelta(days=int(nd_f) + 2)
# put them in ncss format
dstr0 = dt0.strftime('%Y-%m-%d-T00:00:00Z')
dstr1 = dt1.strftime('%Y-%m-%d-T00:00:00Z')
print('- dt0 = ' + dstr0)
print('- dt1 = ' + dstr1)

# specify spatial limits
north = aa[3]
south = aa[2]
west = aa[0] + 360
east = aa[1] + 360

if testing == True:
    var_list = 'surf_el'
else:
    var_list = 'surf_el,water_temp,salinity,water_u,water_v'

# create the request url
# url = ('http://ncss.hycom.org/thredds/ncss/grid/GLBy0.08/expt_93.0/data/forecasts/FMRC_best.ncd'+
#     '?var='+var_list +
#     '&north='+str(north)+'&south='+str(south)+'&west='+str(west)+'&east='+str(east) +
#     '&time_start='+dstr0+'&time_end='+dstr1+'&timeStride=8' +
#     '&addLatLon=true&accept=netcdf4')
    
# This string was auto-generated by making choices on this website:
# https://ncss.hycom.org/thredds/ncss/grid/GLBy0.08/expt_93.0/dataset.html
# which sometimes is slow to come up.
# Alos, it only worked after I changed https to http.
url = ('http://ncss.hycom.org/thredds/ncss/GLBy0.08/expt_93.0' + 
    '?var=surf_el' +
    '&north='+str(north)+'&south='+str(south)+'&west='+str(west)+'&east='+str(east) +
    '&disableProjSubset=on&horizStride=1' +
    '&time_start=2018-12-04T12%3A00%3A00Z&time_end=2018-12-14T12%3A00%3A00Z&timeStride=8' +
    '&vertCoord=&addLatLon=true&accept=netcdf')

# get the data and save as a netcdf file
counter = 1
got_file = False
while (counter <= 3) and (got_file == False):
    print('Attempting to get data, counter = ' + str(counter))
    tt0 = time.time()
    try:
        (a,b) = urlretrieve(url,fn_out)
        # a is the output file name
        # b is a message you can see with b.as_string()
    except URLError as e:
        if hasattr(e, 'reason'):
            print(' *We failed to reach a server.')
            print(' -Reason: ', e.reason)
        elif hasattr(e, 'code'):
            print(' *The server couldn\'t fulfill the request.')
            print(' -Error code: ', e.code)
    except timeout:
        print(' *Socket timed out')
    else:
        got_file = True
        print(' Worked fine')
    print(' -took %0.1f seconds' % (time.time() - tt0))
    counter += 1

# check results
ds = nc.Dataset(fn_out)
print('\nVariables:')
for vn in ds.variables:
    print('- '+vn)
ds.close()
